#include "rclcpp/rclcpp.hpp"
#include "detector/YOLOv5Detection.hpp" // Correct the include path to match your message
#include <memory>
#include <iostream>

rclcpp::Node::SharedPtr node;

void runDetectorPythonScript() {
    // Execute your Python script here
    int detectorReturnCode = system("python3 /home/roboboat/RoboBoat_Cyber_Minority/ROS2_Imp/ros2_foxy/src/detector/detector.py");
    if (detectorReturnCode == 0) {
        // Python script executed successfully
        std::cout << "detector.py has been found and is being loaded...";
    } else {
        std::cout << "detector.py cannot be found. Error will be published here and in logs";
    }
}

void publishDetectorData() {
    // Create a publisher for your custom message
    auto publisher = node->create_publisher<big_brain::msg::YOLOv5Detection>("detection", 10);

    rclcpp::WallRate loop_rate(0.1);  // Publish data every 0.1 second
    while (rclcpp::ok()) {
        auto message = std::make_unique<big_brain::msg::YOLOv5Detection>();
        message->data_field = "Data generated by C++ node";

        // Publish the message
        publisher->publish(std::move(message));
        RCLCPP_INFO(node->get_logger(), "Data published: %s", message->data_field.c_str());
        loop_rate.sleep();
    }
}

void subscribeDetectorData(const big_brain::msg::YOLOv5Detection::SharedPtr msg) {
    // Process received data and log it
    RCLCPP_INFO(node->get_logger(), "Received: %s", msg->data_field.c_str());
}

int main(int argc, char *argv[]) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<rclcpp::Node>("detector_cpp_node");

    // Set up a subscriber for the custom message
    auto subscription = node->create_subscription<big_brain::msg::YOLOv5Detection>("detector", 10, publishDetectorData);
;

    // Create threads for Python execution and publishing
    std::thread pythonThread(runDetectorPythonScript);
    std::thread publishThread(publishDetectorData);

    rclcpp::spin(node);

    pythonThread.join();
    publishThread.join();

    rclcpp::shutdown();
    return 0;
}


